import { useState } from 'react';
import './App.css';

function ModalFloating({ open, x, y, children }: { open: boolean; x: number; y: number; children: React.ReactNode }) {
  if (!open) return null;
  return (
    <div
      className="modal-floating"
      style={{
        position: 'fixed',
        top: y + 12,
        left: x + 12,
        zIndex: 20000,
        pointerEvents: 'auto',
        minWidth: 340,
        maxWidth: 480,
        background: 'white',
        borderRadius: 10,
        boxShadow: '0 4px 24px #0003',
        padding: 16,
        border: '1.5px solid #b00',
        fontSize: '0.95rem',
        lineHeight: 1.25
      }}
    >
      {children}
    </div>
  );
}

function Modal({ open, onClose, children }: { open: boolean; onClose: () => void; children: React.ReactNode }) {
  if (!open) return null;
  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={e => e.stopPropagation()}>
        <button className="modal-close" onClick={onClose}>√ó</button>
        {children}
      </div>
    </div>
  );
}

function Header() {
  return (
    <header className="santander-header">
      <span className="santander-header-title">Santander - Estrategia de Pruebas</span>
      <span className="santander-header-badge">QA</span>
    </header>
  );
}


const cuadrantes = [
  {
    numero: 2,
    titulo: 'Q2: Autom√°ticas & Manuales',
    pruebas: [
      'Pruebas Funcionales',
      'Pruebas de Historias de Usuario',
      'Pruebas Manuales Exploratorias',
      'Revisi√≥n de Aceptaci√≥n',
      'Pruebas con Criterios Gherkin / BDD / ATDD',
    ],
  },
  {
    numero: 3,
    titulo: 'Q3: Manuales',
    pruebas: [
      'Pruebas Exploratorias',
      'Pruebas de Usabilidad',
      'Pruebas Alpha/Beta',
      'Validaci√≥n de UX/UI',
      'Pruebas con UAT',
      'Pruebas de Flujo de Negocio',
    ],
  },
  {
    numero: 1,
    titulo: 'Q1: Autom√°ticas',
    pruebas: [
      'Pruebas Unitarias',
      'Pruebas de Componentes',
      'Pruebas de Integraci√≥n T√©cnica',
      'Pruebas de API (a nivel t√©cnico)',
      'Pruebas de Regresi√≥n T√©cnicas',
    ],
  },
  {
    numero: 4,
    titulo: 'Q4: Herramientas y Pruebas No Funcionales',
    pruebas: [
      'Pruebas de Rendimiento (carga, estr√©s)',
      'Pruebas de Seguridad',
      'Pruebas de Compatibilidad',
      'Pruebas de Recuperaci√≥n / Resiliencia',
      'Pruebas No Funcionales en General',
    ],
  },
];



function App() {
  const [seleccionadas, setSeleccionadas] = useState<string[]>([]);
  // Estado para cada modal flotante
  const [modalEquiOpen, setModalEquiOpen] = useState(false);
  const [modalEquiPos, setModalEquiPos] = useState({ x: 0, y: 0 });
  const [modalLimiteOpen, setModalLimiteOpen] = useState(false);
  const [modalLimitePos, setModalLimitePos] = useState({ x: 0, y: 0 });
  const [modalDecisionOpen, setModalDecisionOpen] = useState(false);
  const [modalDecisionPos, setModalDecisionPos] = useState({ x: 0, y: 0 });
  const [modalCausaEfectoOpen, setModalCausaEfectoOpen] = useState(false);
  const [modalCausaEfectoPos, setModalCausaEfectoPos] = useState({ x: 0, y: 0 });
  const [modalTransicionOpen, setModalTransicionOpen] = useState(false);
  const [modalTransicionPos, setModalTransicionPos] = useState({ x: 0, y: 0 });
  const [modalCasoUsoOpen, setModalCasoUsoOpen] = useState(false);
  const [modalCasoUsoPos, setModalCasoUsoPos] = useState({ x: 0, y: 0 });
  const [modalRequisitosOpen, setModalRequisitosOpen] = useState(false);
  const [modalRequisitosPos, setModalRequisitosPos] = useState({ x: 0, y: 0 });
  const [modalBDDOpen, setModalBDDOpen] = useState(false);
  const [modalBDDPos, setModalBDDPos] = useState({ x: 0, y: 0 });
  // Modal flotante para Pruebas exploratorias
  const [modalExploratoriasOpen, setModalExploratoriasOpen] = useState(false);
  const [modalExploratoriasPos, setModalExploratoriasPos] = useState({ x: 0, y: 0 });

  const togglePrueba = (prueba: string) => {
    setSeleccionadas((prev) =>
      prev.includes(prueba)
        ? prev.filter((p) => p !== prueba)
        : [...prev, prueba]
    );
  };

  const generarDocumento = () => {
    const doc = `Estrategia de Pruebas\n\nPruebas seleccionadas:\n${seleccionadas.map((p) => '- ' + p).join('\n')}`;
    const blob = new Blob([doc], { type: 'text/plain' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'estrategia_pruebas.txt';
    link.click();
  };

  return (
    <>
      <Header />
      <div className="santander-bg">
        <div className="cuadrante-wrapper">
          {/* Etiquetas laterales y superiores */}
          <div className="cuadrante-label cuadrante-label-top">Orientados a negocio</div>
          <div className="cuadrante-label cuadrante-label-left">Apoyan al equipo</div>
          <div className="cuadrante-label cuadrante-label-bottom">Orientados a tecnolog√≠a</div>
          <div className="cuadrante-label cuadrante-label-right">Eval√∫an el producto</div>

          {/* Cuadrantes 2x2 */}
          <div className="cuadrante-matrix">
            <div className="cuadrante-card cuadrante-card-2">
              <h2><b>Q2: Autom√°ticas & Manuales</b></h2>
              <ul>
                {cuadrantes[0].pruebas.map((prueba) => (
                  <li key={prueba}>
                    <label className="santander-checkbox">
                      <input
                        type="checkbox"
                        checked={seleccionadas.includes(prueba)}
                        onChange={() => togglePrueba(prueba)}
                      />
                      {prueba}
                    </label>
                  </li>
                ))}
              </ul>
            </div>
            <div className="cuadrante-card cuadrante-card-3">
              <h2><b>Q3: Manuales</b></h2>
              <ul>
                {cuadrantes[1].pruebas.map((prueba) => (
                  <li key={prueba}>
                    <label className="santander-checkbox">
                      <input
                        type="checkbox"
                        checked={seleccionadas.includes(prueba)}
                        onChange={() => togglePrueba(prueba)}
                      />
                      {prueba}
                    </label>
                  </li>
                ))}
              </ul>
            </div>
            <div className="cuadrante-card cuadrante-card-1">
              <h2><b>Q1: Autom√°ticas</b></h2>
              <ul>
                {cuadrantes[2].pruebas.map((prueba) => (
                  <li key={prueba}>
                    <label className="santander-checkbox">
                      <input
                        type="checkbox"
                        checked={seleccionadas.includes(prueba)}
                        onChange={() => togglePrueba(prueba)}
                      />
                      {prueba}
                    </label>
                  </li>
                ))}
              </ul>
            </div>
            <div className="cuadrante-card cuadrante-card-4">
              <h2><b>Q4: Herramientas y Pruebas No Funcionales</b></h2>
              <ul>
                {cuadrantes[3].pruebas.map((prueba) => (
                  <li key={prueba}>
                    <label className="santander-checkbox">
                      <input
                        type="checkbox"
                        checked={seleccionadas.includes(prueba)}
                        onChange={() => togglePrueba(prueba)}
                      />
                      {prueba}
                    </label>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>

        {/* === SECCI√ìN: CATEGOR√çAS DE T√âCNICAS DE DISE√ëO (ISTQB) === */}
        <div className="istqb-section">
          <h2>‚úÖ CATEGOR√çAS DE T√âCNICAS DE DISE√ëO (seg√∫n ISTQB)</h2>
          <div className="istqb-categorias">
            <div className="istqb-categoria-card">
              <h3>T√©cnicas de caja negra</h3>
              <p>Basadas en comportamiento externo</p>
            </div>
            <div className="istqb-categoria-card">
              <h3>T√©cnicas de caja blanca</h3>
              <p>Basadas en estructura interna del c√≥digo</p>
            </div>
            <div className="istqb-categoria-card">
              <h3>T√©cnicas basadas en experiencia</h3>
              <p>Basadas en juicio, intuici√≥n y experiencia</p>
            </div>
          </div>

          <h2>üéØ 1. T√âCNICAS DE CAJA NEGRA (Black-box)</h2>
          <table className="istqb-table">
            <thead>
              <tr>
                <th></th>
                <th>T√©cnica</th>
                <th>Descripci√≥n</th>
              </tr>
            </thead>
            <tbody>
              {[
                { nombre: 'Partici√≥n de equivalencia', desc: 'Divide entradas/salidas en clases v√°lidas e inv√°lidas, prueba 1 por clase.' },
                { nombre: 'An√°lisis de valores l√≠mite', desc: 'Verifica comportamientos en l√≠mites extremos (m√≠nimos/m√°ximos).' },
                { nombre: 'Tabla de decisi√≥n', desc: 'Eval√∫a combinaciones de condiciones y reglas.' },
                { nombre: 'Tabla de causa-efecto', desc: 'Deriva casos desde una tabla l√≥gica de causas (inputs) y efectos (outputs).' },
                { nombre: 'Transici√≥n de estados', desc: 'Prueba cambios de estado y eventos activadores.' },
                { nombre: 'Caso de uso (Use Case)', desc: 'Pruebas centradas en flujos funcionales del usuario.' },
                { nombre: 'Pruebas basadas en requisitos', desc: 'Cada caso se deriva de un requisito funcional concreto.' },
                { nombre: 'Pruebas de comportamiento (BDD)', desc: 'Usa Gherkin o lenguajes similares para definir escenarios.' },
              ].map(({ nombre, desc }) => (
                <tr
                  key={nombre}
                  onMouseEnter={e => {
                    if (nombre === 'Partici√≥n de equivalencia') {
                      setModalEquiOpen(true);
                      setModalEquiPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'An√°lisis de valores l√≠mite') {
                      setModalLimiteOpen(true);
                      setModalLimitePos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Tabla de decisi√≥n') {
                      setModalDecisionOpen(true);
                      setModalDecisionPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Tabla de causa-efecto') {
                      setModalCausaEfectoOpen(true);
                      setModalCausaEfectoPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Transici√≥n de estados') {
                      setModalTransicionOpen(true);
                      setModalTransicionPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Caso de uso (Use Case)') {
                      setModalCasoUsoOpen(true);
                      setModalCasoUsoPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Pruebas basadas en requisitos') {
                      setModalRequisitosOpen(true);
                      setModalRequisitosPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Pruebas de comportamiento (BDD)') {
                      setModalBDDOpen(true);
                      setModalBDDPos({ x: e.clientX, y: e.clientY });
                    }
                }}
                onMouseMove={e => {
                    if (nombre === 'Partici√≥n de equivalencia' && modalEquiOpen) {
                      setModalEquiPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'An√°lisis de valores l√≠mite' && modalLimiteOpen) {
                      setModalLimitePos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Tabla de decisi√≥n' && modalDecisionOpen) {
                      setModalDecisionPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Tabla de causa-efecto' && modalCausaEfectoOpen) {
                      setModalCausaEfectoPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Transici√≥n de estados' && modalTransicionOpen) {
                      setModalTransicionPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Caso de uso (Use Case)' && modalCasoUsoOpen) {
                      setModalCasoUsoPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Pruebas basadas en requisitos' && modalRequisitosOpen) {
                      setModalRequisitosPos({ x: e.clientX, y: e.clientY });
                    } else if (nombre === 'Pruebas de comportamiento (BDD)' && modalBDDOpen) {
                      setModalBDDPos({ x: e.clientX, y: e.clientY });
                    }
                }}
                onMouseLeave={() => {
                    if (nombre === 'Partici√≥n de equivalencia') setModalEquiOpen(false);
                    if (nombre === 'An√°lisis de valores l√≠mite') setModalLimiteOpen(false);
                    if (nombre === 'Tabla de decisi√≥n') setModalDecisionOpen(false);
                    if (nombre === 'Tabla de causa-efecto') setModalCausaEfectoOpen(false);
                    if (nombre === 'Transici√≥n de estados') setModalTransicionOpen(false);
                    if (nombre === 'Caso de uso (Use Case)') setModalCasoUsoOpen(false);
                    if (nombre === 'Pruebas basadas en requisitos') setModalRequisitosOpen(false);
                    if (nombre === 'Pruebas de comportamiento (BDD)') setModalBDDOpen(false);
                }}
                style={{ cursor: nombre === 'Partici√≥n de equivalencia' || nombre === 'An√°lisis de valores l√≠mite' || nombre === 'Tabla de decisi√≥n' || nombre === 'Tabla de causa-efecto' || nombre === 'Transici√≥n de estados' || nombre === 'Caso de uso (Use Case)' || nombre === 'Pruebas basadas en requisitos' || nombre === 'Pruebas de comportamiento (BDD)' ? 'pointer' : undefined }}
                >

                  <td>
                    <label className="santander-checkbox">
                      <input
                        type="checkbox"
                        checked={seleccionadas.includes(nombre)}
                        onChange={() => togglePrueba(nombre)}
                      />
                    </label>
                  </td>
                  <td>{nombre}</td>
                  <td>{desc}</td>
                </tr>
              ))}
            </tbody>
          </table>
          {/* Modal flotante para Partici√≥n de equivalencia */}
          <ModalFloating open={modalEquiOpen} x={modalEquiPos.x} y={modalEquiPos.y}>
            {modalEquiOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  La partici√≥n de equivalencia se utiliza para dividir el conjunto de entradas en clases v√°lidas e inv√°lidas, con el fin de reducir el n√∫mero de casos de prueba. Se asume que todos los valores dentro de una misma clase se comportan de forma similar, por lo que basta con probar un valor representativo de cada clase.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  Si una app permite registrarse solo a personas entre 18 y 65 a√±os, se identifican tres clases: edad v√°lida (18‚Äì65), edad inv√°lida menor a 18 y edad inv√°lida mayor a 65. Luego se elige un valor por clase, como 30, 15 y 70 respectivamente, para verificar que la validaci√≥n se comporte correctamente en cada grupo.
                </div>
              </div>
            )}
          </ModalFloating>
          {/* Modal flotante para An√°lisis de valores l√≠mite */}
          <ModalFloating open={modalLimiteOpen} x={modalLimitePos.x} y={modalLimitePos.y}>
            {modalLimiteOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  El an√°lisis de valores l√≠mite se usa para verificar c√≥mo se comporta un sistema en los extremos de los rangos v√°lidos e inv√°lidos. Esta t√©cnica se basa en que los errores suelen ocurrir en los l√≠mites, por lo que se prueban los valores m√≠nimos, m√°ximos, y los inmediatamente adyacentes a esos l√≠mites.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  Si una app acepta edades entre 18 y 65 a√±os para registrarse, se prueban los valores l√≠mite: 18 y 65 (v√°lidos), as√≠ como 17 y 66 (inv√°lidos). Esto permite detectar errores comunes en la validaci√≥n de rangos al probar justo en los bordes del comportamiento esperado.
                </div>
              </div>
            )}
          </ModalFloating>
          {/* Modal flotante para Tabla de decisi√≥n */}
          <ModalFloating open={modalDecisionOpen} x={modalDecisionPos.x} y={modalDecisionPos.y}>
            {modalDecisionOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  La t√©cnica de tabla de decisi√≥n se utiliza para evaluar todas las combinaciones posibles de condiciones y sus respectivas acciones o resultados. Es √∫til cuando una funcionalidad depende de m√∫ltiples reglas l√≥gicas que se deben cumplir en distintas combinaciones.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  Para otorgar un pr√©stamo, una entidad puede considerar dos condiciones: si el cliente tiene ingresos fijos y si no tiene deudas. La tabla de decisi√≥n analizar√≠a las cuatro combinaciones posibles (s√≠/s√≠, s√≠/no, no/s√≠, no/no) y definir√≠a la acci√≥n correspondiente en cada caso, como "aprobar", "evaluar", o "rechazar", asegurando cobertura total de reglas.
                </div>
              </div>
            )}
          </ModalFloating>
          {/* Modal flotante para Tabla de causa-efecto */}
          <ModalFloating open={modalCausaEfectoOpen} x={modalCausaEfectoPos.x} y={modalCausaEfectoPos.y}>
            {modalCausaEfectoOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  La tabla de causa-efecto se utiliza para derivar casos de prueba a partir de una representaci√≥n l√≥gica que relaciona causas (entradas o condiciones) con efectos (salidas o acciones). Es √∫til cuando m√∫ltiples condiciones influyen en distintos resultados, permitiendo identificar combinaciones relevantes de forma sistem√°tica.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  En una banca en l√≠nea, las causas pueden ser: ingreso correcto de usuario, ingreso correcto de contrase√±a y uso de dispositivo confiable. Seg√∫n las combinaciones de estas condiciones, los efectos pueden ser permitir el acceso, requerir verificaci√≥n adicional (OTP), o bloquear el intento. La tabla de causa-efecto permite definir casos de prueba para cada combinaci√≥n, validando que el sistema responda adecuadamente ante intentos v√°lidos, sospechosos o fallidos.
                </div>
              </div>
            )}
          </ModalFloating>
          {/* Modal flotante para Transici√≥n de estados */}
          <ModalFloating open={modalTransicionOpen} x={modalTransicionPos.x} y={modalTransicionPos.y}>
            {modalTransicionOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  La t√©cnica de transici√≥n de estados se utiliza para probar el comportamiento de un sistema a medida que cambia de un estado a otro en respuesta a ciertos eventos. Permite validar que las transiciones, condiciones y respuestas del sistema sean correctas seg√∫n el flujo definido.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  En una app bancaria, una tarjeta puede estar en estado "Activa", "Bloqueada" o "Cancelada". Acciones como "ingresar clave err√≥nea tres veces" o "solicitar cancelaci√≥n" provocan transiciones entre estos estados. Mediante un diagrama de estados, se generan casos de prueba para verificar que cada evento conduzca al estado correcto.
                </div>
              </div>
            )}
          </ModalFloating>
          {/* Modal flotante para Caso de uso */}
          <ModalFloating open={modalCasoUsoOpen} x={modalCasoUsoPos.x} y={modalCasoUsoPos.y}>
            {modalCasoUsoOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  La t√©cnica de caso de uso se enfoca en validar los flujos funcionales del usuario a trav√©s del sistema, considerando pasos normales y alternativos. Permite verificar que cada interacci√≥n cumpla los objetivos del usuario seg√∫n los requisitos del negocio.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  En una banca m√≥vil, un caso de uso puede ser "Realizar transferencia entre cuentas". El flujo principal incluye: ingresar al sistema, seleccionar cuentas origen y destino, ingresar el monto y confirmar. Los flujos alternativos incluyen errores como saldo insuficiente o formato inv√°lido del monto. Las pruebas se dise√±an para cubrir tanto el camino exitoso como las excepciones, garantizando una experiencia funcional completa.
                </div>
              </div>
            )}
          </ModalFloating>
          {/* Modal flotante para Pruebas basadas en requisitos */}
          <ModalFloating open={modalRequisitosOpen} x={modalRequisitosPos.x} y={modalRequisitosPos.y}>
            {modalRequisitosOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  Las pruebas basadas en requisitos consisten en derivar casos de prueba directamente de los requisitos funcionales definidos para el sistema. Aseguran que cada funcionalidad especificada se haya implementado correctamente y cumpla con lo solicitado por el cliente o el negocio.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  Si un requisito en una aplicaci√≥n bancaria indica que "el usuario debe poder visualizar el saldo de todas sus cuentas en la pantalla principal despu√©s de iniciar sesi√≥n", se genera un caso de prueba que verifica exactamente esa funcionalidad: ingresar al sistema y comprobar que se muestran los saldos correctamente. As√≠, cada requisito tiene una o m√°s pruebas que validan su cumplimiento.
                </div>
              </div>
            )}
          </ModalFloating>
          {/* Modal flotante para Pruebas de comportamiento (BDD) */}
          <ModalFloating open={modalBDDOpen} x={modalBDDPos.x} y={modalBDDPos.y}>
            {modalBDDOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  Las pruebas de comportamiento (BDD) se basan en la colaboraci√≥n entre negocio, desarrollo y QA para definir escenarios de prueba usando un lenguaje natural estructurado como Gherkin. Estas pruebas describen el comportamiento esperado del sistema en funci√≥n de ejemplos concretos que mejoran la comprensi√≥n compartida.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  En una app bancaria, un escenario BDD podr√≠a validar una transferencia exitosa entre cuentas. Usando Gherkin, se escribe:<br />
                  <span style={{ display: 'block', margin: '0.5em 0', fontFamily: 'monospace', background: '#f8f8f8', padding: '0.5em', borderRadius: 6 }}>
                    Dado que el usuario ha iniciado sesi√≥n,<br />
                    Y tiene saldo suficiente,<br />
                    Cuando realiza una transferencia de S/100,<br />
                    Entonces el sistema debe confirmar la operaci√≥n<br />
                    Y mostrar el nuevo saldo actualizado.
                  </span>
                </div>
              </div>
            )}
          </ModalFloating>

          <h2>üß† 2. T√âCNICAS BASADAS EN EXPERIENCIA</h2>
          <table className="istqb-table">
            <thead>
              <tr>
                <th></th>
                <th>T√©cnica</th>
                <th>Descripci√≥n</th>
              </tr>
            </thead>
            <tbody>
              {[
                { nombre: 'Pruebas exploratorias', desc: 'Sin casos predefinidos, se prueba sobre la marcha observando resultados.' },
                { nombre: 'Adivinaci√≥n de errores (error guessing)', desc: 'Se anticipan fallos comunes basados en la experiencia del tester.' },
                { nombre: 'Checklists (listas de verificaci√≥n)', desc: 'Lista de elementos a validar. √ötil en pruebas de mantenimiento.' },
                { nombre: 'Pruebas basadas en escenarios', desc: 'Se dise√±an historias realistas de uso para probar flujos completos.' },
                { nombre: 'Pruebas heur√≠sticas', desc: 'Aplicaci√≥n de patrones conocidos de errores (ej. heur√≠sticas de Bach).' },
              ].map(({ nombre, desc }) => (
                nombre === 'Pruebas exploratorias' ? (
                  <tr
                    key={nombre}
                    onMouseEnter={e => {
                      setModalExploratoriasOpen(true);
                      setModalExploratoriasPos({ x: e.clientX, y: e.clientY });
                    }}
                    onMouseMove={e => {
                      if (modalExploratoriasOpen) {
                        setModalExploratoriasPos({ x: e.clientX, y: e.clientY });
                      }
                    }}
                    onMouseLeave={() => setModalExploratoriasOpen(false)}
                    style={{ cursor: 'pointer' }}
                  >
                    <td>
                      <label className="santander-checkbox">
                        <input
                          type="checkbox"
                          checked={seleccionadas.includes(nombre)}
                          onChange={() => togglePrueba(nombre)}
                        />
                      </label>
                    </td>
                    <td>{nombre}</td>
                    <td>{desc}</td>
                  </tr>
                ) : (
                  <tr key={nombre}>
                    <td>
                      <label className="santander-checkbox">
                        <input
                          type="checkbox"
                          checked={seleccionadas.includes(nombre)}
                          onChange={() => togglePrueba(nombre)}
                        />
                      </label>
                    </td>
                    <td>{nombre}</td>
                    <td>{desc}</td>
                  </tr>
                )
              ))}
            </tbody>
          {/* Modal flotante para Pruebas exploratorias */}
          <ModalFloating open={modalExploratoriasOpen} x={modalExploratoriasPos.x} y={modalExploratoriasPos.y}>
            {modalExploratoriasOpen && (
              <div className="modal-content modal-content-floating" style={{ fontSize: '0.89rem', lineHeight: 1.25 }}>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Aplicaci√≥n:</b>
                <div style={{ marginBottom: '0.4em' }}>
                  Las pruebas exploratorias permiten al evaluador analizar una aplicaci√≥n sin casos de prueba predefinidos, facilitando el descubrimiento de defectos inesperados y validando la experiencia del usuario. En el √°mbito bancario, complementan las pruebas formales al revelar errores no previstos y ofrecer una visi√≥n m√°s realista del uso cotidiano.
                </div>
                <b style={{ fontSize: '1.01em', color: '#b00' }}>Ejemplo:</b>
                <div>
                  En una app bancaria, el tester navega libremente, consulta saldos, transfiere fondos y modifica datos, simulando escenarios como errores de conexi√≥n o cambios de contrase√±a seguidos de transferencias. As√≠, detecta problemas de usabilidad y validaci√≥n que no est√°n cubiertos en pruebas formales, mejorando la calidad y seguridad del sistema.
                </div>
              </div>
            )}
          </ModalFloating>
          </table>

          <h2>üîç 3. T√âCNICAS DE CAJA BLANCA (White-box)</h2>
          <table className="istqb-table">
            <thead>
              <tr>
                <th></th>
                <th>T√©cnica</th>
                <th>Descripci√≥n</th>
              </tr>
            </thead>
            <tbody>
              {[
                { nombre: 'Cobertura de sentencias', desc: 'Asegura que cada l√≠nea de c√≥digo sea ejecutada al menos una vez.' },
                { nombre: 'Cobertura de decisiones (ramas)', desc: 'Asegura que cada decisi√≥n (if, else, switch) sea evaluada en ambas direcciones.' },
                { nombre: 'Cobertura de condiciones', desc: 'Eval√∫a cada condici√≥n booleana por separado.' },
                { nombre: 'Cobertura de condici√≥n/decisi√≥n', desc: 'Combinaci√≥n de ambas.' },
                { nombre: 'Cobertura de m√∫ltiples condiciones', desc: 'Eval√∫a todas las combinaciones de condiciones en una decisi√≥n.' },
                { nombre: 'Pruebas de flujo de datos', desc: 'Verifica el uso correcto de variables (definidas, usadas, destruidas).' },
                { nombre: 'Pruebas de caminos l√≥gicos', desc: 'Verifica todos los caminos posibles a trav√©s del c√≥digo.' },
              ].map(({ nombre, desc }) => (
                <tr key={nombre}>
                  <td>
                    <label className="santander-checkbox">
                      <input
                        type="checkbox"
                        checked={seleccionadas.includes(nombre)}
                        onChange={() => togglePrueba(nombre)}
                      />
                    </label>
                  </td>
                  <td>{nombre}</td>
                  <td>{desc}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className="istqb-extra">
            <h3>üîÑ T√âCNICAS ADICIONALES SEG√öN ISTQB AVANZADO (Test Analyst y Test Manager)</h3>
            <table className="istqb-extra-table">
              <thead>
                <tr>
                  <th></th>
                  <th>T√©cnica</th>
                  <th>Aplicaci√≥n t√≠pica</th>
                </tr>
              </thead>
              <tbody>
                {[
                  { nombre: 'Pruebas basadas en riesgo (Risk-based)', desc: 'Se dise√±an seg√∫n impacto y probabilidad.' },
                  { nombre: 'T√©cnicas combinatorias (pairwise, t-wise)', desc: 'Reducen combinaciones usando teor√≠a matem√°tica.' },
                  { nombre: 'Pruebas ortogonales', desc: 'Variante de pruebas combinatorias optimizadas.' },
                  { nombre: 'T√©cnicas de prueba de calidad de datos', desc: 'Prueba de consistencia, precisi√≥n y completitud de datos.' },
                ].map(({ nombre, desc }) => (
                  <tr key={nombre}>
                    <td>
                      <label className="santander-checkbox">
                        <input
                          type="checkbox"
                          checked={seleccionadas.includes(nombre)}
                          onChange={() => togglePrueba(nombre)}
                        />
                      </label>
                    </td>
                    <td>{nombre}</td>
                    <td>{desc}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        <button className="santander-btn" onClick={generarDocumento} disabled={seleccionadas.length === 0}>
          Generar Estrategia de Pruebas
        </button>
      </div>
    </>
  );
}

export default App;
